Keep main app.py - light and try to have functions in relevant files

# General Coding Standards
- Write clean, readable code following PEP 8 standards.
- Use meaningful and descriptive names for variables, functions, and classes.
- Include comments and docstrings to explain the purpose and functionality of the code.
- Use type hints for function parameters and return values to improve readability and catch errors early.
- Keep functions short and focused on a single responsibility, ideally not exceeding 20-30 lines.
- Avoid magic numbers; use constants or configuration settings for values that may change.
- Follow the DRY (Don't Repeat Yourself) principle; refactor common functionality into reusable components.
- Remove any unused code, variables, or imports to keep the codebase clean.
- Prefer simple and straightforward solutions over complex ones.
- Ensure that the code is modular and functions are reusable where possible.

# Error Handling and Logging
- Handle errors gracefully with appropriate logging using Python's `logging` module.
- Use try-except blocks for operations that may fail, such as file I/O, network requests, and API calls.
- Log informative messages for debugging, including errors and important state changes.
- Avoid catching broad exceptions; catch specific exceptions to handle errors appropriately.
- Ensure that critical errors are logged and, where appropriate, displayed to the user via Streamlit.

# Project-Specific Guidelines
- Use Streamlit for the front end, ensuring the UI is intuitive and responsive.
- For web scraping, use Selenium with Chrome in headless mode to extract data from URLs.
- Configure Selenium to handle dynamic content using WebDriverWait for elements to load.
- Implement concurrent scraping using ThreadPoolExecutor, limiting threads based on settings.
- Integrate Tavily search using the `tavily-python` library, leveraging its async client for efficiency.
- For LLMs, use OpenAI and Google Gemini, storing API keys securely in environment variables.
- Store all data (prompts, searches, URL lists, settings) in JSON files with full CRUD operations.
- Implement a caching mechanism for URL extraction, storing results in a `cache/` directory with timestamps.
- Run long-running tasks, like data extraction, in background threads to avoid blocking the Streamlit UI.
- Use `st.session_state` to manage state across Streamlit reruns, tracking extraction status and results.
- Organize code into modules: `app.py`, `prompt_manager.py`, `search_manager.py`, `url_list_manager.py`, `extractor.py`, `settings_manager.py`, and `utils.py`.
- Use classes to manage prompts, searches, URL lists, settings, and extraction, encapsulating logic.

# Code Organization and Structure
- Follow a modular structure, with each module handling a specific aspect of the application.
- Use classes to encapsulate logic and data, promoting reusability and separation of concerns.
- Define constants at the top of modules or in a separate configuration file.
- Use relative imports where appropriate to avoid circular dependencies.
- Ensure each module has a clear and focused responsibility.

# Testing and Debugging
- Write unit tests for each module using `unittest` or `pytest` to verify functionality.
- Include tests for edge cases and error conditions.
- Use logging for debugging, with different log levels for various message types.
- Run tests regularly to catch regressions and maintain code quality.

# Security and Ethical Practices
- Securely manage sensitive information like API keys using environment variables.
- Respect website terms of service and implement rate limiting for web scraping.
- Avoid storing sensitive data in plain text within the application.

# Performance and Efficiency
- Optimize code for performance, especially in loops and frequently called functions.
- Use efficient data structures and algorithms where appropriate.
- Minimize global variables; prefer passing parameters explicitly.
- Ensure the application remains responsive and avoids blocking the UI during long operations.

# Documentation and Maintenance
- Include a README file with setup and running instructions for the application.
- Document each function and class with docstrings, detailing parameters, return values, and usage.
- Keep code well-organized and easy to navigate with clear directory and file structures.
- Regularly review and refactor code to enhance quality and maintainability.

# Collaboration and Version Control
- Use version control (e.g., Git) to track changes and collaborate effectively.
- Write clear, concise commit messages describing the changes made.
- Follow branching strategies (e.g., feature branches, pull requests) for collaborative work.
- Keep the main branch in a working state at all times.

# Streamlit-Specific Guidelines
- Use Streamlit’s caching mechanisms (`st.cache_data`, `st.cache_resource`) to boost performance.
- Manage state across reruns with `st.session_state` to retain user inputs and application state.
- Ensure the UI is intuitive and user-friendly, providing clear instructions and feedback.
- Leverage Streamlit’s layout features (e.g., columns, containers) to organize the interface effectively.
- Handle long-running tasks in background threads, updating `st.session_state` for status tracking.